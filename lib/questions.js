module.exports =[{"url":"0001-TDD.md","text":"Какое из определений наилучшим образом подходит для описания практики TDD?","tags":["tdd","test-driven development","разработка через тестирование"],"answers":[{"text":"Разработка состоит из коротких циклов \"красный-зеленый-рефакторинг\"","correct":true},{"text":"Тестировщики помогают разработчикам писать тесты","correct":false},{"text":"Разработчики пишут тесты самостоятельно","correct":false},{"text":"Сомнительная практика, не применима в сложных системах, т.к. нельзя сразу определить требования","correct":false}],"description":"<p>Практика TDD (test-driven development, разработка через тестирование) состоит из коротких циклов \"красный-зеленый-рефакторинг\". Цикл начинается с написания теста на ещё несуществующий код - \"красная фаза\". Далее пишется необходимый код для прохождения этого теста - \"зелёная фаза\". Цикл заканчивается рефакторингом - улучшение структуры кода, и существующие тесты помогают разработчику убедиться в работоспособности функциональности. Также можно опубликовать свои изменения в системе контроля версий после окончания цикла. Подробнее в <a href=\"https://technical-excellence.ru/wiki/TDD\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0003-TDD.md","text":"Что такое концепция test first design?","tags":["tdd","test-driven development","разработка через тестирование"],"answers":[{"text":"Писать тесты перед написанием кода","correct":true},{"text":"Покрыть весь код тестами","correct":false},{"text":"Покрыть существующий код тестами, перед тем, как писать новый","correct":false},{"text":"Продумывать тесты перед написанием кода","correct":false}],"description":"<p>Test first design подразумевает написание тестов, которые являются требования для создаваемой системы. Если тесты отложить после написания основного кода, то смысл в них теряется, что приводит к тому, что часто на них пропускают в попытке сделать проект быстрее. Подробнее в <a href=\"https://technical-excellence.ru/wiki/TDD\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0004-TDD.md","text":"Какая польза от использования практики TDD?","tags":["tdd","test-driven development","разработка через тестирование"],"answers":[{"text":"Помогает улучшить качество и снизить количество ошибок","correct":true},{"text":"Ускоряет процесс разработки в целом","correct":true},{"text":"Заставляет создавать тесты, которые просто автоматизировать.","correct":true},{"text":"Помогает хорошему дизайну и разделению проблем.","correct":true}],"description":"<p>Все ответы верные. Подробнее в <a href=\"https://technical-excellence.ru/wiki/TDD\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0010-CI.md","text":"Что поддерживает CI (непрерывную интеграцию)?","tags":["сi","continuous integration"],"answers":[{"text":"Слияние всех веток в общую не менее 1 раза в день","correct":true},{"text":"Наличие и запуск автотестов для каждой сборки","correct":true},{"text":"Наличие \"фича тогглов\" (feature toggles) для неготовых фич","correct":true},{"text":"Наличие в команде специалистов по интеграционному тестированию","correct":false}],"description":"<p>CI (непрерывная интеграция) - практика разработки программного обеспечения, которая заключается в постоянном слиянии рабочих копий в общую основную ветвь разработки (до нескольких раз в день) и выполнении частых автоматизированных сборок проекта для скорейшего выявления потенциальных дефектов и решения интеграционных проблем. Подробнее в <a href=\"https://technical-excellence.ru/wiki/CI\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0011-CI.md","text":"Почему стоит автоматизировать сборку?","tags":["сi","continuous integration"],"answers":[{"text":"Она даёт быструю обратную связь о том, что ПО остаётся в готовом для сборки состоянии и не содержит ошибок конфигурации","correct":true},{"text":"Без неё нельзя полностью проверить работоспособность вашей системы","correct":false},{"text":"Без неё нельзя выйти в релиз","correct":false},{"text":"Того требуют правила компании","correct":false}],"description":"<p>Даёт быструю обратную связь о том, что ПО остаётся в готовом для сборки состоянии и не содержит ошибок конфигурации. Подробнее в <a href=\"https://technical-excellence.ru/wiki/CI\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0012-CI.md","text":"Укажите преимущества Непрерывной Интеграции (Continuous Integration)?","tags":["сi","continuous integration"],"answers":[{"text":"Снижает риск и усилия по интеграции","correct":true},{"text":"Появляется быстрая обратная связь о влиянии изменений на систему","correct":true},{"text":"Улучшает читаемость кода","correct":false},{"text":"Удлиняет процесс разработки целиком","correct":false}],"description":"<p>Снижается риск и усилия по интеграции, появляется быстрая обратная связь о влиянии изменений на систему.  Подробнее в <a href=\"https://technical-excellence.ru/wiki/CI\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0021-SOLID.md","text":"Что **НЕ** является принципом SOLID?","tags":["solid","design patterns","clean code"],"answers":[{"text":"Принцип внедрения интерфейсов (The Interface Injection Principle)","correct":true},{"text":"Принцип единой ответственности (The Single Responsibility)","correct":false},{"text":"Принцип открытости/закрытости (The Open Closed Principle)","correct":false},{"text":"Принцип инверсии зависимостей (The Dependency Inversion Principle)","correct":false}],"description":"<p>SOLID - набор и из 5 принципов проектирования, получивший название по первым буквам этих принципов. Принципа внедрения интерфейсов (The Interface Injection Principle) в нём нет. Подробнее в <a href=\"https://technical-excellence.ru/wiki/SOLID\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0022-SOLID.md","text":"Один из пяти принципов проектирования \"SOLID\". Этот принцип говорит о том, что слишком \"толстые\" интерфейсы необходимо разделять на более маленькие и специфические, чтобы программные сущности маленьких интерфейсов знали только о методах, которые необходимы для их клиентов.","tags":["solid","design patterns","clean code"],"answers":[{"text":"Принцип разделения интерфейсов (Interface Segregation Principle)","correct":true},{"text":"Принцип единой ответственности (The Single Responsibility)","correct":false},{"text":"Принцип открытости/закрытости (The Open Closed Principle)","correct":false},{"text":"Принцип внедрения интерфейсов (The Interface Injection Principle)","correct":false}],"description":"<p>Принцип разделения интерфейсов (Interface Segregation Principle). Подробнее в <a href=\"https://technical-excellence.ru/wiki/InterfaceSegregationPrinciple\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0032-Design.md","text":"Что является архитектурой программной системы?","tags":["ddd","clean architecture","design patterns"],"answers":[{"text":"Исходный код","correct":true},{"text":"Документация","correct":false},{"text":"Артефакты, разработанные отделом архитектуры","correct":false},{"text":"Системная диаграмма","correct":false}],"description":"<p>Только исходный код является настоящей архитектурой, остальные источники являются производными, т.к. требует их \"ручной\" актуализации при изменении исходного кода. Подробнее в <a href=\"https://technical-excellence.ru/wiki/\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0033-Design.md","text":"Укажите критерии \"хорошей\" архитектуры ПО","tags":["ddd","clean architecture","design patterns"],"answers":[{"text":"Позволяет большинство решений о реализации принять в последний момент","correct":true},{"text":"Имеет слабую связанность (low coupling) и высокое зацепление (high cohesion)","correct":true},{"text":"Детально описано отделом архитекторов ПО","correct":false},{"text":"Содержит исчерпывающую модель данных, чтобы не допустить изменения при появлении новых бизнес-правил","correct":false}],"description":"<p>Позволяет большинство решений о реализации принять в последний момент и имеет слабую связанность (low coupling) и высокое зацепление (high cohesion). Подробнее в <a href=\"https://technical-excellence.ru/wiki/\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0050-PP.md","text":"Что такой \"парное программирование\" (PP, pair programming)?","tags":["pp","pair programming","mob programming"],"answers":[{"text":"Два члена команды пишут код вместе за одним компьютером, постоянно давая друг другу обратную связь","correct":true},{"text":"Два члена команды пишут код отдельно. Третий, обычно тестировщик, собирает их в пару при интеграции их кода","correct":false},{"text":"Разработчик и тестировщик пишут и тестируют код отдельно, а потом объединяются для проверки всей системы","correct":false},{"text":"Руководство сравнивает всех разработчиков \"попарно\", чтобы выделить лучших","correct":false}],"description":"<p>Два члена команды пишут код вместе за одним компьютером, постоянно давая друг другу обратную связь. Подробнее в <a href=\"https://technical-excellence.ru/wiki/PairProgramming\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0051-PP.md","text":"Частный случай парного программирования, при котором вся команда работает на одном и том же, в то же время, в том же пространстве, и на том же компьютере.","tags":["pp","pair programming","mob programming"],"answers":[{"text":"Mob-программирование","correct":true},{"text":"Такого подхода нет, т.к. каждый является специалистом в своей области","correct":false},{"text":"Экстремальное программирование","correct":false},{"text":"Скрам","correct":false}],"description":"<p>Mob-программирование по определению работа всей группой над одним и тем же документом, участком кода и т.д. Подробнее в <a href=\"https://technical-excellence.ru/wiki/MobProgramming\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0098-Patterns.md","text":"Это проверенное и готовое к использованию решение. Это не класс и не библиотека, которую можно подключить к проекту, это нечто большее. Он не зависит от языка программирования, не является законченным образцом, который может быть прямо преобразован в код и может быть реализован по-разному в разных языках программирования.","tags":["solid","design patterns","clean code"],"answers":[{"text":"Шаблон проектирования (Design Pattern)","correct":true},{"text":"Доказанная на практике гипотеза (Proof of Concept)","correct":false},{"text":"Шаблонный метод (Template method)","correct":false},{"text":"Программирование через поиск ответов в Интернете (Stackoverflow programming)","correct":false}],"description":"<p>Шаблон проектирования (Design Pattern). Подробнее в <a href=\"https://technical-excellence.ru/wiki/DesignPatterns\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0099-Patterns.md","text":"Что является **антипаттерном** в ООП?","tags":["solid","design patterns","clean code"],"answers":[{"text":"Божественный объект (God object)","correct":true},{"text":"Фасад (Facade)","correct":false},{"text":"Шаблонный метод (Template method)","correct":false},{"text":"Адаптер (Adapter)","correct":false}],"description":"<p>Антипаттернами называют антиподов паттернов проектирования. Если последние представляют собой \"хорошие\" решения часто возникающих проблем в проектирование, то антипаттерны наоборот ухудшают решение с точки зрения дальнейшей поддержки и развития. Божественный объект (God object) - способ, при котором вся логика не зависимо от слоёв и абстракций содержится в одном объекте/классе. Подробнее в <a href=\"https://technical-excellence.ru/wiki/DesignPatterns\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0100-Patterns.md","text":"Шаблон проектирования (design pattern), гарантирующий, что в приложении будет единственный экземпляр некоторого класса, и предоставляющий глобальную точку доступа к этому экземпляру. Как он называется?","tags":["solid","design patterns","clean code"],"answers":[{"text":"Одиночка (Singleton)","correct":true},{"text":"Создатель (Creator)","correct":false},{"text":"Принцип только однажды (Exactly Once)","correct":false},{"text":"Божественный объект (God Object)","correct":false}],"description":"<p>Одиночка (Singleton) согласно его определению. Подробнее в <a href=\"https://technical-excellence.ru/wiki/DesignPatterns\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0101-Patterns.md","text":"Важный принцип объектно-ориентированного программирования, используемый для уменьшения связанности (coupling) в программных системах.","tags":["solid","design patterns","clean code"],"answers":[{"text":"Инверсия Управления (InversionOfControl)","correct":true},{"text":"Circuit Breaker","correct":false},{"text":"Принцип единственной ответственности (Single-Responsibility Principle)","correct":false},{"text":"Spring Framework","correct":false}],"description":"<p>Одиночка (Singleton) согласно его определению. Подробнее в <a href=\"https://technical-excellence.ru/wiki/InversionOfControl\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0199-CodeQuality.md","text":"Что является метриками качества исходного кода?","tags":["design","code quality"],"answers":[{"text":"Цикломатическая сложность","correct":true},{"text":"Связанность (coupling) классов","correct":true},{"text":"Скорость прохождения ревью (code review)","correct":false},{"text":"Процент покрытия тестами","correct":false}],"description":"<p>Покрытие тестами не является метрикой качества исходного кода.Код может быть \"чистыми\" даже без тестов. На практики такое маловероятно, т.к. подход TDD, в котором цикл начинается с тестов, гарантирует хорошее качество кода и слабосвязанный дизайн. Подробнее в <a href=\"https://technical-excellence.ru/wiki/CleanCode\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0200-CodeQuality.md","text":"Продолжите фразу \"Унаследованный код (legacy code) - это код, ...\"","tags":["design","code quality","legacy code"],"answers":[{"text":"не покрытый тестами","correct":true},{"text":"доставшийся в наследство","correct":false},{"text":"зависящий от устаревших фреймворков или технологий","correct":false},{"text":"в котором никто не разбирается","correct":false}],"description":"<p>Покрытие тестами не является метрикой качества исходного кода.Код может быть \"чистыми\" даже без тестов. На практики такое маловероятно, т.к. подход TDD, в котором цикл начинается с тестов, гарантирует хорошее качество кода и слабосвязанный дизайн. Подробнее в <a href=\"https://technical-excellence.ru/wiki/LegacyCode\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0201-CodeQuality.md","text":"Цикломатическая сложность (Cyclomatic Complexity), как метрика качества исходного кода, зависит от","tags":["design","code quality","legacy code"],"answers":[{"text":"Количества условных операторов ветвления","correct":true},{"text":"Количества операторов цикла","correct":false},{"text":"Количества строк кода","correct":false},{"text":"Количества операторов присваивания","correct":false}],"description":"<p>Цикломатическая сложность (Cyclomatic Complexity) - структурная (или топологическая) мера сложности компьютерной программы. Напрямую зависит от количества условных операторов. Мера была разработана Томасом Дж. Маккейбом в 1976 году. Подробнее в <a href=\"https://technical-excellence.ru/wiki/\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0202-CodeQuality.md","text":"Как нужно выплачивать технический долг?","tags":["design","code quality","legacy code"],"answers":[{"text":"Технический долг стоит выплачивать как можно скорее, чтобы % по нему не \"задушили\" проект","correct":true},{"text":"Выделить бюджет и поручить специальной команде","correct":false},{"text":"В ходе стабилизационного и/или технического спринта","correct":false},{"text":"Когда закончатся требования у заказчика","correct":false}],"description":"<p>Метафора программной инженерии, обозначающая накопленные в программном коде или архитектуре проблемы, связанные с пренебрежением к качеству при разработке программного обеспечения и вызывающие дополнительные затраты труда в будущем. Технический долг (Technical Debt). Подробнее в <a href=\"https://technical-excellence.ru/wiki/TechnicalDebt\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0203-CodeQuality.md","text":"Какая цель рефакторинга?","tags":["design","code quality","legacy code"],"answers":[{"text":"Улучшить читаемость и упростить дальнейшее внесение изменений","correct":true},{"text":"Поместить весь код в один файл для удобства ревью (code review) и печати","correct":false},{"text":"Улучшить скорость работы приложения","correct":false},{"text":"Исправить замечания с ревью (code review)","correct":false}],"description":"<p>Улучшить читаемость и упростить дальнейшее внесение изменений. Подробнее в <a href=\"https://technical-excellence.ru/wiki/Refactoring\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0204-CodeQuality.md","text":"Как можно описать термин \"покрытие исходно кода\" (code coverage)?","tags":["design","code quality","legacy code"],"answers":[{"text":"Процент исходного кода, который выполняется при запуске тестов  ","correct":true},{"text":"Процент исходного кода, включённого в сборку","correct":false},{"text":"Количество разработчиков, которое необходимо для понимания кодовой базы всей системы","correct":false},{"text":"Практика, которая позволяет содержать код без дефектов","correct":false}],"description":"<p>Улучшить читаемость и упростить дальнейшее внесение изменений. Подробнее в <a href=\"https://technical-excellence.ru/wiki/\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0205-CodeQuality.md","text":"К какому уровню покрытия кода тестами нужно стремиться?","tags":["design","code quality","legacy code"],"answers":[{"text":"Покрытие кода тестами — инструмент, который позволяет искать непокрытую тестами логику. Сам по себе покрытие не является целью.","correct":true},{"text":"85%","correct":false},{"text":"100%  ","correct":false},{"text":"теста не обязательны, если код работает без ошибок","correct":false}],"description":"<p>Роберт Мартин утверждает, что если есть часть продукта, не покрытая тестами, то за неё заказчик платить не должен, потому что он не может быть уверен в правильности её работы. При использовании практики TDD у вас не может появиться кода, которые не использовался бы при запуске тестов. Подробнее в <a href=\"https://technical-excellence.ru/wiki/TDD\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0299-Tests.md","text":"Что может показать метафора, называемая \"Пирамидой Тестирования\"?","tags":["design","code quality","tests"],"answers":[{"text":"Распределение количество тестов в зависимости от их уровня — много быстрых и дешёвых, мало долгих и дорогих.","correct":true},{"text":"Иерархию в группе тестирования, где руководитель на вершине, а рядовые сотрудники уровнями ниже.","correct":false},{"text":"Структуру сценариев приёмочного тестирования","correct":false},{"text":"Способ автоматизации, в котором тесты упорядочены по степени важности","correct":false}],"description":"<p>Пирамида тестирования. Подробнее в <a href=\"https://technical-excellence.ru/wiki/TestPyramid\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0300-Tests.md","text":"Какой тип тестирования поддается автоматизации в меньшей степени?","tags":["design","code quality","tests"],"answers":[{"text":"Исследовательское, потому не содержит предопределённых тестовых сценариев","correct":true},{"text":"Интеграционное, потому что есть зависимость от других систем","correct":false},{"text":"Нагрузочное, потому что дорого создавать стенд, аналогичный промышленному","correct":false},{"text":"Приемочное, потому что приёмку могут выполнять только люди","correct":false}],"description":"<p>Исследовательское. Подробнее в <a href=\"https://technical-excellence.ru/wiki/TestPyramid\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0301-Tests.md","text":"Из каких шагов состоит AAA-шаблон структуры модульных тестов?","tags":["design","code quality","tests"],"answers":[{"text":"Данные (Arrange)","correct":true},{"text":"Действие (Act)","correct":true},{"text":"Проверка (Assert)","correct":true},{"text":"Присваивание (Assign)","correct":false}],"description":"<p>ААА-шаблон состоит это Arrange-Act-Assert. Подробнее в <a href=\"https://technical-excellence.ru/wiki/UnitTest\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"},{"url":"0302-Tests.md","text":"Выберите критерии хорошего модульно теста (unit test).","tags":["design","code quality","tests"],"answers":[{"text":"Проверяет только одного логическое утверждение","correct":true},{"text":"Независимый от других тестов","correct":true},{"text":"Достоверный (проверяет действительно то, что должен)","correct":true},{"text":"Быстрый","correct":true},{"text":"Маленький (настолько на сколько это возможно)","correct":true}],"description":"<p>Все ответы верные. Подробнее в <a href=\"https://technical-excellence.ru/wiki/UnitTest\">wiki</a>. Остались вопросы? Задавай в <a href=\"https://t.me/technicalexcellenceru\">нашем чате</a>.</p>"}]